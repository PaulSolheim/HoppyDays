Hoppy Days:

Slides 1-5 Hva vi skal lage

Last ned Assets:
https://goo.gl/GfdSFC

Direkte link:
https://drive.google.com/open?id=1smQfgr48nfEeGSaDkbG-TEVFyGJ_48Ch

Pakk ut fra Nedlastinger
Marker alt og Kopier
Ctrl-A og Ctrl-C

Lag nytt prosjekt i Godot:
Velg Mappe (C:\koding\godot)
Hoppy Days som prosjektnavn
Lag Mappe
Create and Edit

Nyttige shortcuts:
Ctrl-C Kopier
Ctrl-V Lim inn
Ctrl-S Lagre
Ctrl-D Lag Kopi
Ctrl-Z Angre

Høyre-klikk i Filer-området
velg Vis i Filutforsker
Ctrl-V for å lime inn Assets
Klikk tilbake til Godot
(Assets importeres automatisk)

Slide 9

Fix 2 lydfiler:
dobbelt-klikk på SFX mappa
klikk på jump1.ogg
klikk på importer flipp
fjern loop flagg
klikk Reimporter
klikk på pain.ogg
fjern loop flagg
klikk på Reimporter

klikk på scene tabben

Kort forklaring av Godot's GUI

Lage en spiller karakter:
+ phys
Røde noder er for 3D
Lyseblå noder er for 2D

Slides 10-16

Velg KinematicBody2D
Rename til Player
+ Sprite
Bunny2_stand til Texture
Klikk Player
+ CollisonShape2D
velg Shape "new CapsuleShape2D"
Juster størrelse og posisjon
Husk å bruke de innerste punktene
(ikke bruk de ytterste!)
Radius = 60
Height = 32
Passer bra
Pass på at kollisjonsområdet går til beina
klikk bort øyet for kollisjonsområdet

klikk Player
klikk ikonet for å ikke velge objektets barn
Viktig for alle figurer vi skal lage!

Lag en mappe for skripts:
Klikk res:// i FilSystem vinduet
Høyreklikk i Filområdet og velg "Ny mappe"
Skriv Scripts - Lag

Lage et skript for Player:
Klikk så Player er valgt
Klikk Skript ikonet
Klikk mappe-ikonet etter Søkesti
dobbeltklikk på Scripts-mappa
Lagre knappen
Velg Template "No Comments"
Lag knappen

Fjern _ready() funksjonen

var motion = Vector2()

func _physics_process(delta):
		if Input.is_action_pressed("ui_right"):
				pass
				
Hold musepeker over funksjon + Ctrl-C
gir dokumentasjonen 
(høyreklikk lukk for å lukke et vindu)

For å sette Input actions:
Gå til Prosjektinnstillinger
Input map tabben
Finn ui_right og ui_left
Legge til bruk av taster:
legg til Key A for ui_left
legg til Key D for ui_right
legg til Key Space for ui_up

Lukk knappen

Legg til så koden blir:

const SPEED = 750

var motion = Vector2()

func _physics_process(delta):
	if Input.is_action_pressed("ui_right"):
		motion.x = SPEED
	elif Input.is_action_pressed("ui_left"):
		motion.x = -SPEED
	else:
		motion.x = 0
	move_and_slide(motion)

Slides 17-18

For å lagre Scenen:
Ctrl-S
Dobbeltklikk på Scenes mappa for å velge den
Lagre knappen

HIT - 1.gang

Spill Scenen - Flytt spilleren - Spill scenen
Forklar høyre-og-venste feilen

Utfordring: 
høyre og venstre samtidig skal ikke flytte bunny

Vente 5 minutter ...

Legg inn løsningen

AnimatedSprite

Slett Sprite
Legg til AnimatedSprite
legg til animasjoner:
rename default til idle
legg inn bunny2_stand og bunny2_ready
Speed f.eks. 3
ny animasjon: run
legg inn bunny2_walk1 og bunny2_walk2
Speed f.eks. 7
ny animasjon jump
legg inn bunny2_jump
ny animasjon hurt
legg inn bunny2_hurt

Gå til skriptet og legg til
$AnimatedSprite.play("run")
$AnimatedSprite.play("run")
og
$AnimatedSprite.play("idle")

Test Spillet

Forklar egenskapene til AnimatedSprite

Utfordring:
Fix feilen Bunny moonwalker mot venstre

Vente 5 minutter ...
(hint: flip_h)

Legg inn løsningen

Hopping - hva trenger vi?:
- en scene å hoppe i
- noe å hoppe på
- definere gravitasjon (KinematicBody2D påvirkes ikke)
- definere JUMP_SPEED

Ny scene
+ Node2D
rename til Level1
Ctrl-S lagre i Scenes\Levels mappa
Lenke inn Player scenen

Åpne Player scenen
Flytt Player til 0,0 posisjon
Gå tilbake til Level1 scenen
Forklare zoom og flytting i scenen

HIT - 2.gang

Flyttet animasjoner til nytt skript
Lagt til rette i Player skriptet
Laget ny scene Platforms, 
 - plattformer med kollisjons-soner

START - 3.gang

Last ned zip-fil fra github
vis fil i mappen
(husk hvilket nr filen har, f.eks. HoppyDays-master(2))
høyre-klikk på filen
pakk ut alle
Åpne Godot, trykk Scann-knappen
bla til mappen der du pakket ut zip-filen
velg mappen HoppyDays-master under denne mappen.

Åpne det nye prosjektet i Godot
(Marker riktig prosjekt + Rediger-knappen)

	Sjekk at Level1 er hovedscene:
	Prosjektinnstillinger
	Run - Sett Main Scene til Level1 
	(klikk på mappe-ikonet og bla til Scenes/Level1.tscn)

	Sjekk navn på kollisjonslagene:
	Prosjektinnstillinger
	Layer Names - 2d Physics
	Layer 1 -> Player
	Layer 2 -> Terrain

La spillet bruke et større vindu
Prosjektinnstillinger - Window
width = 1920
Height = 1080
Lukk knappen

La oss legge til noe som Bunny kan hoppe på
og lære litt om Flissett:

Åpne Platforms scenen (Scenes/Platforms.tscn)
Menyen - Scene - Konverter Til - Flissett...
Gå til Scenes mappa (dobbeltklikk på Scenes mappa)
Skriv "PlatformTiles.tres" som filnavn
Trykk på Lagre-knappen

Åpne Level1 scenen:
Aktiver Level1
+ TileMap
Bla til Scenes mappa
Dra PlatformTiles.tres til <null> til høyre for "Tile Set"
Du har nå fått platformer med kollisjonssoner
som du kan lage et level med, legg ut noen plattformer
Hvis du vil slette en:
- pek på øverste venstre hjørne og høyre-klikk

La oss legge til gravitasjon!

Forklar Godot's koordinat system:
Fra Topp-Venstre posisjon
(ikke Bunn-Venstre som er vanlig)

positiv y verdi er nedover
negativ y verdi er oppover

Åpne Player scenen - åpne skriptet

endre fall funksjonen:

func fall(delta):
	if is_on_floor():
		motion.y = 0
	else:
		motion.y += GRAVITY * delta

Test spillet, faller Bunny?

La oss hoppe!

endre jump funksjonen:

func jump():
	if is_on_floor() and Input.is_action_pressed("ui_up"):
		motion.y = JUMP_SPEED

Test Spillet - Kan Bunny hoppe?

La oss lage et kamera som kan følge Bunny!

Lag en ny scene
+ node Camera2D
Viktig:
Finn egenskapen "Current" i inspektøren
og klikk i firkanten så den blir aktiv (huke)
Lagre Scenen

Åpne Level1 scenen
Aktiver Player noden
Klikk på lenke-ikonet for å koble til kamera-scenen
Bla til Scenes-mappa og velg Camera2D scenen

Test Spillet - Følger kameraet Bunny?
Gå tilbake til Godot

Aktiver Camera2D noden
Aktiver - Smoothing - Enabled

Test Spillet - Er det mindre hakkete nå?
Gå tilbake til Godot

Aktiver Camera2D noden
Endre Zoom til 1.5 i x og y
Test spillet - er det passe størrelse på ting?
endre Zoom verdiene til du er fornøyd

Sett limits på kamera så det ikke følger langt utenfor nivået
f.eks:
Left: 320     (se små tall øverst, hvis du bygger mot høyre)
Bottom: 3000


Utfordring:
Lag et super-kult nivå som er passe vanskelig!
Klikk på TileMap i Level1 scenen og plasser plattformer
Tips:
 - test spillet ofte 
 - se at det er mulig å hoppe
 - høyre klikk for å slette en plattform

Lykke til!

HIT 3. Gang

Jeg har laget en ParallaxBackground scene siden sist.
Åpne den og gi en kort forklaring.

La oss lage en "Game Over" scene

Lag en ny scene
+ node Control
rename til GameOver
klikk på Layout ikonet
velg "Full Rect" så den bruker hele vinduet
+ node TextureRect
gå til Background mappa
dra bg_layer1.png til Texture området
Aktiver Expand egenskapen
Velg Layout - "Full Rect"

Aktiver GameOver noden
+ node CenterContainer
Velg Layout - "Full Rect"
Aktiver CenterContainer
+ node Label
endre Min Size til
X: 400 Y:200
Skriv "Game Over" i Text egenskapen
Gå til Custom Colors sett til svart
Gå til Custom fonts
velg "new Dynamic Font"
klikk på fonten
klikk Font
Gå til fonts-mappa
dra candles_ttf til Font Data
forandre Size til 180
Aktiver GameOver noden
+ node TextureButton
Gå til HUD mappa
dra Bunny bildet over til
Textures - Normal området
Flytt knappen under teksten
Forandre størrelsen til det dobbelte
aktiver "Expand" egenskapen
Legg til en ny Label under TextureButton
legg til new DynamicFont som før
Dra over candles fonten
sett size til 80
Flytt på label så det ser pent ut
Ctrl-S for å lagre scenen
(putt i scenes-mappa)

Gå til PLayer skriptet
legg til:
export var world_limit = 3000

legg til i fall() funksjonen:
	if position.y > world_limit:
		end_game()
		
lag en ny funksjon:
func end_game():
	get_tree().change_scene("")

gå til scenes mappa,
finn GameOver.tscn
høyre-klikk
velg "kopier sti"

lim inn mellom "" i koden.

Test spillet - får du game over hvis du faller langt ned?

For å komme tilbake til spillet fra gameover
Åpne GameOver scenen
Aktiver GameOver noden
Legg til nytt skript
template "no comments"
velg scripts-mappa
Lag-knappen
Aktiver Node-tabben
Velg pressed()
klikk Koble-Til knappen
Velg GameOver noden

legg til koden:
get_tree().change_scene("")

gå til scenes mappa,
finn Level1.tscn
høyre-klikk
velg "kopier sti"

lim inn mellom "" i koden.

Test Spillet 
- Kan du start spillet på nytt?

Jeg har laget 2 nye scener som heter SpikesTop og SpikesBottom.
Åpne en og gi en kort forklaring.

Nå er det tid for å lage et kult nivå, 
slett gjerne alle mine kakestykker og lag noe kult.

Plasser noen Spikes i scenen din,
Tips 1: Du kan legge dem under Spikes noden i scenen så det blir ryddig.
Tips 2: Når du har plassert en Spike kan du bruke Ctrl-D og flytte kopien.
test at det skrives "Ouch!" i konsollet når du kommer borti en Spike.

5. Gang

Jeg har jukset litt og laget en Scene som heter GUI.tscn
denne skal vise hvor mange mynter og liv vi har i spillet.
La oss legge den til på kameraet:

Åpne Camera2D scenen.
Klikk på Lenke ikonet, finn GUI scenen og velg denne.

Test spillet - Sjekk at du har fått et banner oppe i høyre hjørnet.

La oss lage et skript for å holde orden på spillets "tilstand":
"Et skript skal ha ansvar for en ting"
Dette skriptet skal ha ansvar for å kjøre spillet, dvs.:
	Hvor mange liv og mynter starter vi med?
	Hva skal skje når vi mister et liv?
	Hva skal skje når vi får en ny mynt?

Siden vi lager et spill med bare en scene kan vi legge skriptet rett på Level1.

Åpne Level1 scenen
Klikk på Skript-ikonet
Velg Scripts-mappa
Kall Skriptet: "GameState.gd"
Klikk Lag knappen

La oss flytte end_game() funksjonen fra Player skriptet til GameState.

Åpne Player skriptet
Klipp ut end_game() funksjonen (begge linjene)

Gå til GameState skriptet
Lim inn end_game() funksjonen

Gå til Player skriptet
Gå til fall() funksjonen
endre linjen:
	end_game()
til
	get_parent().end_game()

Test Spillet og sjekk at du får "GameOver" hvis du dør.

La oss lage et "Globalt skript" så det blir enklere å kalle funksjoner
på andre noder uten å bruke navnet på stien til noden.
Koden vår blir lettere å lese og mer robust 
dvs. vi kan endre på plassering og navn på noder uten å endre koden

La oss lage et nytt skript uten å knytte det til noen node:
Gå til Skript tabben
Velg menyen fil - Ny
Gå til Scripts mappa
Gi Skriptet filnavnet: Global.gd
Trykk på Lag-knappen

La oss sørge for at dette skriptet alltid blir kjørt når vi starter spillet.
Gå til Prosjektinnstillinger
Klikk på ".." knappen og finn "Global.gd" under scripts mappa
Klikk på "Legg til" knappen
Sjekk at "Singleton enabled" er huket av for skriptet
Dette sørger for at bare en "kopi" av skriptet blir kjørt.
Klikk "Lukk" knappen

Legg inn denne koden:

var GameState

Ctrl-S for å lagre

Åpne GameState skriptet og legg til:

func _ready():
	Global.GameState = self

Nå vil Global.GameState variabelen
alltid peke på GameState skriptet
uansett hvilken scene som er aktiv.

Gå til Global skriptet
La oss legge til en for Player:

var Player

Ctrl-S for å lagre

Åpne Player skriptet og legg til:

func _ready():
	Global.Player = self

Nå vil Global.Player variabelen
alltid peke på Player skriptet
uansett hvilken scene som er aktiv
og uansett hvor Player befinner seg
i hierarkiet i scenen.

Gå til Player skriptet
Gå til fall() funksjonen
endre linjen:
	get_parent().end_game()
til
	Global.GameState.end_game()

Gå til Global skriptet
La oss legge til en for GUI:

var GUI

Ctrl-S for å lagre

Åpne GUI skriptet:

endre
func ready():
	pass
	
til

func _ready():
	Global.GUI = self

Nå er spillet vårt mer robust og enklere å utvide.

Hvis du vil ha flere scener i spillet
så bør du flytte GameState skriptet ut av Level1
og gjøre det til en "Singleton" på samme måten som Global skriptet.
Da kan du "dra med deg" antall liv og mynter
fra scene til scene.

La oss legge til Liv!

Åpne GameState skriptet og legg til:

export var starting_lives = 3
var lives

func _ready():
	...
	lives = starting_lives
	
ny funksjon:

func hurt():
	lives -= 1
	if lives < 0:
		end_game()
		
La oss gi nytt navn til SpikesTop skriptet:
gå til Scripts mappa i FilSystem
høyreklikk på SpikesTop.gd
velg "Endre Navn"
Skriv Hazards
Trykk på "Endre Navn" knappen

Åpne Hazards skriptet

Endre:
	print("ouch")
Til:
	Global.GameState.hurt()

Siden skriptet nå heter Hazards
og skal brukes for alle enemies
er det ikke lenger logisk at
funksjonen heter _on_SpikesTop_body_entered(body)

La oss endre navnet, da må vi først
koble fra noden i SpikesTop scenen.

Åpne SpikesTop scenen i Scenes mappa
Gå til Node tabben (nede til høyre)
velg linja med Grønt ikon foran (_on_SpikesTop...)
Trykk "Koble Fra" - Koble fra
Da skal vi koble til en ny funksjon med annet navn:
Trykk "Koble Til" - Skriv "_onbody_entered" som navn på funksjonen - Koble Til
Flytt linja med:
	Global.GameState.hurt()
Ned til den nye funksjonen
og fjern linja med "pass"

Da kan vi slette den gamle funksjonen
Slett _on_SpikesTop_body_entered(body): linja

Test spillet - Får du GameOver hvis du kolliderer med
SpikesTop 3 ganger?

(
	La oss fikse SpikesBottom også:
	Åpne SpikesBottom scenen
	Høyreklikk på øverste node i scenen
	Trykk på Node tabben
	Velg linjen med det grønne ikonet
	Klikk "Koble Fra"
	Høyreklikk på øverste node i scenen
	Velg "Clear Script"
	Høyreklikk på noden pånytt
	Velg "Attach Script"
	Finn Hazards skriptet og velg det.
	Trykk på Node tabben
	Velg linjen med "body_entered"
	Klikk "Koble Til"
	Velg funksjonen "_onbody_entered"
	Trykk på "Koble Til" knappen
)

La oss få Bunny til å hoppe hver gang han mister et liv:

Åpne Player skriptet:
Lag en ny funksjon

func hurt():
	motion.y = JUMP_SPEED

Åpne GameState skriptet
legg til en ny linje i hurt() funksjonen
så den blir:

func hurt():
	lives -= 1
	Global.Player.hurt()
	if lives < 0:
		end_game()

Test spillet:
	Hopper Bunny i lufta hver gang 
	hun kommer borti en Spike?

HIT 5. Gang

La oss oppdatere GUI så vi kan se hvor mange liv
vi har igjen.

Åpne GUI scenen
Gå til skriptet

Lag en ny funksjon i skriptet:

func update_GUI(lives):
	$Banner/HBoxContainer/LifeCount.text = str(lives)

Åpne GameState skriptet
Lag en ny funksjon:

func update_GUI():
	Global.GUI.update_GUI(lives)

Legg til et kall til funksjonen når vi
starter spillet dvs. i _ready() funksjonen:

func _ready():
	...
	update_GUI()

Legg til et kall til funksjonen hver gang
du mister et liv, dvs. i hurt() funksjonen:

func hurt():
	lives -= 1
	update_GUI()
	...
	
Test Spillet:
	Kan du se hvor mange liv du har igjen?
	Fiks Level1 så spillet blir enda kulere!
	
Nå kan vi lage animerte mynter så vi kan få ekstra liv!
Vi skal også legge inn lyder og bakgrunnsmusikk i spillet.
Så skal vi lage "Jump Pad" som får Bunny til å hoppe ekstra høyt.
Deretter "Spikeman" som patruljerer og Bunny bør unngå.

La oss lage animerte mynter!

Lag en ny scene
Legg til en ny node (+)
skriv "anim" så AnimatedSprite blir valgt, trykk lag knappen
Legg til SpriteFrames ved å:
klikk på <null> ved siden av Frames,
velg "New SpriteFrames" og klikk på den.
Da skal du ha fått frem Animations vinduet.
Gå til mappa GFX/Items,
velg alle 4 myntene og dra dem inn i animasjonen.
Skru på animasjonen så du ser den.
For å fikse "snapping":
Legg til bronze_3 og bronze_2 på slutten.

Juster hastigheten (FPS) til noe du liker.
Skru av animasjonen.

La oss legge til kollisjonssone:
+ node Area2D under AnimatedSprite
+ node CollisionShape2D under den igjen
Velg CircleShape2D som Shape i inspektøren
Juster størrelsen (dra i de innerste prikkene)

Velg AnimatedSprite i hierarkiet,
Klikk ikonet for "vær sikker på at objektets barn ikke er valgbare"
Gjør så kollisjonsområdet ikke vises.

Gå til Prosjektinnstillinger
gå til Lag / 2d physics
gi layer 4 navnet "Pickups"
Trykk Lukk knappen

Aktiver Area2D noden i hierarkiet
Gå til Collisions
Sett Layer til Pickups (fjern Player)
(tror ikke det er nødvendig å sette 
også på Player at mask skal inkl. Pickups,
men det kan ikke skade)

Rename AnimatedSprite til Coin
Lag et nytt skript for Coin
Velg at det skal være i Scripts mappa
Fjern _ready() funksjonen

Klikk 2D for å få frem scenen
Ctrl-S for å lagre, husk å legge scenen i scenes mappa.

Velg Area2D noden
i Node tabben, velg body_entered
trykk "Koble Til" knappen
Velg Coin og trykk "Koble til" knappen

I funksjonen som ble laget:
fjern pass
legg til:
	Global.GameState.coin_up()
	
La oss lage denne funksjonen:
Åpne GameState skriptet
Lag en ny funksjon:

func coin_up():
	coins += 1
	print(coins)
	
lag en variabel på toppen:

var coins = 0

Åpne Level1 scenen
Legg til en Node2D node
rename til Coins
Lenk inn en Coin scene og plasser den i scenen

Test spillet 
skrives det et tall i konsollet
hver gang du kolliderer med mynten?

La oss lage en kul effekt når vi treffer en mynt:

Gå til Coin scenen
Aktiver Coin i hierarkiet
+ node animation, velg AnimationPlayer

Forklar "Key Frame Animation"

Aktiver AnimationPlayer
Lag ny Animation kall den "die"
Aktiver Coin
Velg kun "Scale" fra ikoner på toppen
Klikk "insert Key" ikonet på toppen
sett Length til 0.5 (s)
zoom inn
velg 0.2 sekunder
endre Transform.scale til 1.5 og 1.5 på Coin
Trykk key-ikonet ved siden av scale
velg 0.5 sekunder
endre scale til 0.1 og 0.1 på Coin
Trykk key-ikonet ved siden av scale
Skru på Playing på Coin og spill die animasjonen
Flytt die animasjonen til begynnelsen

Gå tilbake til skriptet:

legg til i 
func _on_Area2D_body_entered():
	..
	$AnimationPlayer.play("die")

lag:
func die():
	queue_free()
	
La oss kalle funksjonen fra AnimationPlayer
Gå til 2D
Lag et nytt track, klikk på + ikonet
velg "add call function"
velg Coin i vinduet og trykk OK knappen
velg 0.5 (s)
Add Keyframe (+)
Klikk "edit keyframe" ikonet (nede lengst til høyre)
i Name feltet skriv: die
(som er navnet på funksjonen)

Test spillet - Får du animasjonen og forsvinner mynten?

Utfordring:
	Plasser masse mynter i scenen så Bunny kan bli rik!

La oss oppdatere GUI:
Åpne GUI scenen
Velg Skriptet

Oppdater update_GUI() funksjonen
legg til coins som parameter foran lives
legg til en ny linje:
	$Banner/HBoxContainer/Coin/CoinCount.text = str(coins)

Åpne GameState skriptet
Endre Update_GUI() funksjonen så den blir:
	Global.GUI.update_GUI(coins, lives)
	
legg til en linje i coin_up() funksjonen
	update_GUI()

La oss la Bunny få et nytt liv hver gang
hun har samlet 10 nye mynter:

Legg til en ny export variabel på toppen
av GameState skriptet:

export var coin_target = 10

Vi skal bruke rest ved divisjon
for å finne ut om vi skal få et nytt liv
(hvis det kan deles på 10 uten rest får vi nytt liv)

func coin_up():
	..
	var multiple_of_coin_target = (coins % coin_target) == 0
	if multiple_of_coin_target:
		life_up()

func life_up():
	lives += 1
	update_GUI()
	
Test spillet:
	Får du samlet mynter?
	Får du et nytt liv ved 10/20.. mynter?

(Finpuss av GUI)
Åpne GUI scenen - Velg 2D
Aktiver GUI i Scenen
Klikk + ikonet
skriv anim - velg AnimationPlayer
lag en ny animasjon - gi den navnet "CoinPulse"
sett lengden til 0.2 sekunder
velg CoinIcon i scenen
under Rect - Scale, trykk key-ikonet
zoom inn (scroll hjulet)
velg slutten av animasjonen, trykk key-ikonet
nå har vi fått 2 key-frames med størrelse 1
velg 0.1 sekunder (i midten)
forandre Scale til 1.5 1.5 og trykk key-ikonet

Lag en ny animasjon (new ikonet)
gi den navnet "LifePulse"
velg LifeIcon i scenen
sett lengden til 0.2 sekunder
under Rect - Scale, trykk key-ikonet
zoom inn (scroll hjulet)
velg slutten av animasjonen, trykk key-ikonet
nå har vi fått 2 key-frames med størrelse 1
velg 0.1 sekunder (i midten)
forandre Scale til 1.5 1.5 og trykk key-ikonet

Lag en ny animasjon (new ikonet)
gi den navnet "Hurt"
velg LifeIcon i scenen
sett lengden til 0.2 sekunder
Velg Visibility - Modulate, trykk key-ikonet
velg slutten av animasjonen, trykk key-ikonet
nå har vi fått 2 key-frames
velg 0.1 sekunder (i midten)
forandre Modulate til Rødfarge

Gå til GUI skriptet
Lag en ny funskjon:

func animate(animation):
	$AnimationPlayer.play(animation)

Åpne GameState skriptet og legg til:

onready var GUI = Global.GUI
(onready når vi bruker en node i en variabel)

bruk GUI variabelen i skriptet istedenfor Global.GUI

func animate_GUI(animation):
	GUI.animate(animation)

Legg til kall til funksjonen fra:
coin_up()
life_up()
og hurt()
etter update_GUI() linja

func coin_up():
	..
	update_GUI()
	animate_GUI("CoinPulse")
	..

func life_up():
	..
	update_GUI()
	animate_GUI("LifePulse")

func hurt():
	..
	update_GUI()
	animate_GUI("Hurt")
	..

(viktig at navnet er helt likt som i scenen!)

Test Spillet - Får du animasjoner når du skal?

Har også fikset Coin bug 
(det var mulig å ta coin flere ganger)

HIT 6. Gang

La oss legge til lyder!

Åpne Level1 scenen
Aktiver Level1 noden
+ ikonet får å legge til en node
velg Node2D, rename til "Sounds"
+ ikonet skriv audio
velg AudioStreamPlayer, rename til "Music"
Velg en av disse fra SFX mappa:
Chiptune_Adventures_1.ogg
Summer_Park.ogg
Dra over til Stream egenskapen
Test ved å skru på Playing egenskapen

Skru på AutoPlay egenskapen
Juster Volume Db f.eks. til -10

Test Spillet - Får du bakgrunnsmusikk?

Aktiver Sounds i scenen
+ ikonet, skriv audio
velg AudioStreamPlayer, rename til "Jump_SFX"
Dra Jump_1.ogg til Stream egenskapen
Juster Volume Db f.eks. til -10
Legg til et skript (skript ikonet)
Velg Scripts mappa, Lagre-knapp
Lag-Knapp

Åpne Global skriptet
Legg til en variabel for skriptet:
var jump_sfx

Gå tilbake til jump_SFX skriptet
Fjern pass fra ready() funksjonen
og legg inn:

func _ready():
	Global.jump_sfx = self

Legg til en AudioStreamPlayer under Sounds:
Pain_SFX

Dra pain.ogg til Stream
Juster Volume Db til -10

Åpne Global skriptet og legg til:
var pain_sfx

Gå tilbake til 2D
Legg til Skript
(husk å velge Scripts mappa)

func _onready():
	Global.pain_sfx = self

Åpne Player skriptet
Legg til i jump funksjonen:
		Global.jump_sfx.play()

Åpne GameState skriptet
Legg til i hurt() funksjonen:

func hurt():
	..
	Global.pain_sfx.play()
	if lives < 0:
		end_game()

Åpne Coin scenen
Legg til en AudioStreamPlayer node (+)
Dra Coin_SFX til Stream egenskapen

Gå til skript
Legg til i _on_Area2D_body_entered(body)
	..
	$AudioStreamPlayer.play()

Test Spillet - Får du alle lydene?
Juster Volume Db på lydene så du blir fornøyd.

Hvis du vil lage dine egne lyder
så er denne websiden kul:
https://jfxr.frozenfractal.com/

Lagt inn Victory og Portal scener.

Skal koble fra GameState som singleton.
Klargjøre til Global.next_level().

Neste Gang:
	Lage Jump Pads
	Legge til SpikeMan

Hva kan gjøre spillet enda kulere?:
	Legge til Skyer?
	Legge til Portal ved slutten av Level1
	Legge inn flere Levels?
	Legge til hjelm som beskytter mot SpikesBottom?
	Legge til BossFight?
	